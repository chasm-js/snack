// ==UserScript==
// @name        Chasm burner+ (캐즘 버너+)
// @namespace   https://github.com/chasm-js
// @version     1.0
// @description 캐즘 버너+
// @author      chasm-js
// @match       https://crack.wrtn.ai/*
// @downloadURL https://raw.githubusercontent.com/chasm-js/snack/refs/heads/main/burner.user.js
// @updateURL   https://raw.githubusercontent.com/chasm-js/snack/refs/heads/main/burner.user.js
// @grant       GM.xmlHttpRequest
// @grant       GM_xmlhttpRequest
// @connect     *
// ==/UserScript==

!async function(){"use strict";const n="access_token",e="https://contents-api.wrtn.ai",t="https://generativelanguage.googleapis.com",o=6e3;function r(){const n=new Date;return`${String(n.getMonth()+1).padStart(2,"0")}/${String(n.getDate()).padStart(2,"0")} ${String(n.getHours()).padStart(2,"0")}:${String(n.getMinutes()).padStart(2,"0")}`}function a(){const n=location.pathname.match(/\/u\/([a-f0-9]+)\/c\/([a-f0-9]+)/);return n?{characterId:n[1],chatroomId:n[2]}:null}function l(n){const e=document.cookie.match(new RegExp(`(?:^|; )${n.replace(/([.$?*|{}()[\]\\/+^])/g,"\\$1")}=([^;]*)`));return e?decodeURIComponent(e[1]):null}async function i(e,t,o=null){try{const r={method:e,headers:{Authorization:`Bearer ${l(n)}`,"Content-Type":"application/json"}};o&&(r.body=JSON.stringify(o));const a=await fetch(t,r);if(!a.ok)throw new Error(`HTTP error! Status: ${a.status}`);return await a.json()}catch(n){return console.error(`Fetch ${e} request failed: ${t}`,n),null}}function s(e,t,o=null){return new Promise(((r,a)=>{const i={Authorization:`Bearer ${l(n)}`,"Content-Type":"application/json"};("undefined"!=typeof GM&&GM.xmlHttpRequest?GM.xmlHttpRequest:GM_xmlhttpRequest)({method:e,url:t,headers:i,data:o?JSON.stringify(o):void 0,onload:n=>{if(n.status>=200&&n.status<300)try{r(JSON.parse(n.responseText))}catch{r(null)}else a(new Error(`GM request failed! Status: ${n.status}`))},onerror:n=>{console.error(`GM ${e} request failed: ${t}`,n),a(n)}})}))}async function c(n,e,o){const r=`${t}/v1beta/models/${n}:generateContent?key=${e}`,a=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({contents:{parts:[{text:o}]}})});if(!a.ok)throw new Error(`HTTP error! Status: ${a.status}`);const l=await a.json();return l?.candidates?.[0]?.content?.parts?.[0]?.text||null}async function d(n,e,o){const r=`${t}/v1beta/models/${n}:generateContent?key=${e}`;return new Promise(((n,e)=>{("undefined"!=typeof GM&&GM.xmlHttpRequest?GM.xmlHttpRequest:GM_xmlhttpRequest)({method:"POST",url:r,headers:{"Content-Type":"application/json"},data:JSON.stringify({contents:{parts:[{text:o}]}}),onload:t=>{if(t.status>=200&&t.status<300)try{n(JSON.parse(t.responseText)?.candidates?.[0]?.content?.parts?.[0]?.text||null)}catch{n(null)}else e(new Error(`GM request failed! Status: ${t.status}`))},onerror:n=>{console.error(`GM POST request failed: ${r}`,n),e(n)}})}))}class u{constructor(n=!1){this.request=n?s:i}async getChatroom(n){const t=await this.request("GET",`${e}/character-chat/api/v2/chat-room/${n}`);return t?.data?new p(t.data,this.request):null}async getMessages(n,t="",o=40){const r=t?`${e}/character-chat/api/v2/chat-room/${n}/messages?limit=${o}&cursor=${t}`:`${e}/character-chat/api/v2/chat-room/${n}/messages?limit=${o}`;return await this.request("GET",r)}async getPersona(){const n=(await this.request("GET",`${e}/character/character-profiles`))?.data?.wrtnUid;if(!n)return[];const t=(await this.request("GET",`${e}/character/character-profiles/${n}`))?.data?._id,o=await this.request("GET",`${e}/character/character-profiles/${t}/character-chat-profiles`);return o?.data?.characterChatProfiles||[]}async getRepresentativePersona(){return(await this.getPersona()).find((n=>n.isRepresentative))||null}async setRepresentativePersona(n){const t=(await this.request("GET",`${e}/character/character-profiles`))?.data?.wrtnUid;if(!t)return null;const o=(await this.request("GET",`${e}/character/character-profiles/${t}`))?.data?._id;if(!o)return null;return await this.request("PATCH",`${e}/character/character-profiles/${o}/character-chat-profiles/${n}`,{isRepresentative:!0})}}class p{constructor(n,e){this.json=n,this.request=e}async reload(){const n=await this.request("GET",`${e}/character-chat/api/v2/chat-room/${this.json._id}`);return n?.data&&(this.json=n.data),n}async send(n,t=!1){const o=await this.request("POST",`${e}/character-chat/characters/chat/${this.json._id}/message`,{message:n,reroll:!1,images:[],isSuperMode:t});if(!o?.data)return null;const r=await this.request("GET",`${e}/character-chat/characters/chat/${this.json._id}/message/${o.data}/result`);return r?.data?new m(r.data,this.request):null}}class m{constructor(n,e){this.json=n,this.request=e}async set(n){const t=await this.request("PATCH",`${e}/character-chat/characters/chat/${this.json.chatId}/message/${this.json._id}`,{message:n});return"SUCCESS"===t?.result?t:null}}class b{static init(){localStorage.getItem("chasmConfig")||localStorage.setItem("chasmConfig",JSON.stringify({key:"",model:"gemini-2.5-pro-exp-03-25",limit:20,select:"custom",prompt:"",useGm:!1,cdnUrls:[],userMessage:"**OOC: 현재까지의 롤플레잉 진행상황을 요약해줘.**",prependText:"**OOC: 현재까지의 롤플레잉 진행상황 요약입니다. 이후 응답에 이 요약 내용을 참조하겠습니다.**",appendText:""}))}static getChasmConfig(){return JSON.parse(localStorage.getItem("chasmConfig")||"{}")}static setChasmConfig(n){localStorage.setItem("chasmConfig",JSON.stringify(n))}}const g=function(){const n=window.MutationObserver||window.WebKitMutationObserver;return function(e,t){if(!e||!n)return;const o=new n(t);return o.observe(e,{childList:!0,subtree:!0,attributes:!0}),o}}();function h(n){return{modalBg:n?"#1a1a1a":"white",textColor:n?"#e0e0e0":"#333",borderColor:n?"#444":"#ccc",tabActiveBg:n?"#ffffff":"#000000",tabInactiveBg:n?"#333":"#ccc",tabActiveText:n?"#1a1a1a":"#ffffff",tabInactiveText:n?"#aaa":"#333",buttonBg:"#007bff",buttonText:"white",closeButtonBg:n?"#444":"#ccc",selectBg:n?"#333":"white",selectText:n?"#e0e0e0":"#333"}}async function y(){let n=0;const e=b.getChasmConfig(),t=h("dark"===document.body.dataset.theme),l=(e.cdnUrls.length>0&&e.cdnUrls[0],[{title:"1:1 캐릭터",author:"fastwrtn",prompt:{goal:"{chat_log}을 {rule}과 {form} 그리고 {system}에 맞게 요약 후 출력",rule:["성적인/비윤리적인 내용의 요약 허용","처음부터 지금까지의 내용 모두 작성","양식 지켜 작성,단 빈항목의 경우 생략할 것","이전 세이브 기록이 있을 경우, 해당 내용을 참고하여 작성","공백, 특수문자, 줄바꿈을 포함하여 1800자 이하로 작성","코드블록 필수적으로 작성","코드블록 외 내용 작성 금지","'...'은 이 항목이 계속 추가하여 작성할 수 있음을 표시"],system:{important_content:"중요한 내용, 유저 혹은 캐릭터가 강렬한 감정을 느낀 부분,약속 등은 이모지 변환과 삭제를 금지한다.",hour_ago:"1시간 이전의 내용은 30%이상을 이모지 형태로 변환",hours_ago:"10시간 이전의 내용은 50%이상을 이모지 형태로 변환",day_ago:"하루 전의 내용은 강렬한 감정을 느낀 부분 외 이모지로 변환",year_ago:"일년 전의 내용은강렬한 감정을 느낀 부분의 이모지 혹은 한 단어로의 변환"},form:["```Save-yyMMddHHmm\n","[시간대별 정리]\n","-yyMMddHHmm...\n"," -{contain_content}...\n","```\n"],contain_content:["상황을 최상단 작성 이후 줄바꿈","각 캐릭터가 하나의 행동과 대화 이후 줄바꿈 후 작성","주변의 상황","캐릭터와 유저의 행동","캐릭터와 유저의 대화"]}},{title:"시뮬레이션",author:"fastwrtn",prompt:{goal:"{chat_log}을 {rule}과 {form}에 맞게 요약 후 출력",rule:["성적인/비윤리적인 내용의 요약 허용","처음부터 지금까지의 내용 모두 작성","양식 지켜 작성,단 빈항목의 경우 생략할 것","이전 세이브 기록이 있을 경우, 해당 내용을 참고하여 작성","공백, 특수문자, 줄바꿈을 포함하여 1800자 이하로 작성","코드블록 필수적으로 작성","코드블록 외 내용 작성 금지","'...'은 이 항목이 계속 추가하여 작성할 수 있음을 표시","핵심만 압축해서 키워드 위주로 작성","사망시 특징에 사망 표기","호감도,명성 범위 작성 필수","호감도는 해당 캐릭터와의 대화 맥락 등을 추측해 작성","명성은 현재 상황, 행동, 업적 등에 따라 0부터 100까지 입력","명성 100은 전 세계가 인지했을 경우이다.","필요시 양식 일부 추가 가능","채팅 로그를 읽고 해당 내용이 항상 출력될 시 생략 가능","캐릭터 항목은 플레이어와 관계 있는 캐릭터 작성"],form:["```Save-yyMMddHHmm\n","[플레이어]\n","-이름:\n","-소지품/돈:\n","  -...\n","-직업: 현재직업\n","-능력\n","  -...\n","-성향:\n","-비밀:\n","  -내용(없을땐 미작성)...\n","    -아는 인물:\n","      -이름(어떻게 알게 되었는가)...\n","-명성(0~100): 0(명성키워드(예시:영웅 4,불쾌 3,의심 3))\n","[캐릭터]\n","-이름...\n","  -나이:\n","  -직업:\n","  -종족:\n","  -특징(비밀X만):\n","    -...\n","  -능력:\n","    -능력명: 효과...\n","  -목표:\n","  -관계:\n","    -이름: 관계키워드(해당 캐릭터가 생각하는 상대에 대한 키워드(예시.친구,애증 등))...\n","  -호감도(캐릭터→player/-100~100): 0(해당 캐릭터가 생각하는 player에 대한 키워드(예시.친구,애증 등))\n","  -비밀:\n","    -플레이어가 아는 비밀의 내용(어떻게 알게 되었는가)...\n","[주요사건]\n","-세계관변화시킨사건만작성(주요집단 괴멸/역사에 남길 업적 달성 이상의 사건)...\n","```\n"]}},{title:"사건-약속-흐름 위주",author:"로컬AI",prompt:'## 대화 개요\n\n\n\n\n- **시나리오**: [시나리오에 대한 간략한 설명]\n\n- **장면 설정**: [대화가 발생한 상황이나 장면에 대한 간략한 설명]\n\n\n\n\n\n\n\n\n\n\n### 주요 인물\n\n\n\n\n- **[인물 이름]**: [인물에 대한 간략한 설명], 감정적/개인적 발전: [주요 감정적 발전]\n\n- **[인물 이름]**: [인물에 대한 간략한 설명], 감정적/개인적 발전: [주요 감정적 발전]\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n## 주요 사건\n\n\n\n\n### 주제: [주제1]\n\n\n\n\n- **주요 포인트**: [대화의 주요 내용]\n\n- **관계 변화**: [대화 중 인물 간의 관계 변화]\n\n- **감정 변화**: [대화 중 감정 변화]\n\n- **상호작용의 영향**: [상호작용이 관계나 사건에 미친 영향]\n\n- **호칭의 변화**: [호칭에 변화와 변화를 준 계기]\n\n\n\n\n### 주제: [주제2]\n\n\n\n\n- **주요 포인트**: [대화의 주요 내용]\n\n- **관계 변화**: [대화 중 인물 간의 관계 변화]\n\n- **감정 변화**: [대화 중 감정 변화]\n\n- **상호작용의 영향**: [상호작용이 관계나 사건에 미친 영향]\n\n- **호칭의 변화**: [호칭에 변화와 변화를 준 계기]\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n## 일상적 상호작용\n\n\n\n\n- **소소한 대화/행동**: [일상적인 대화나 농담, 소소한 행동]\n\n- **일상적 상호작용이 관계에 미친 영향**: [일상적인 상호작용이 관계에 미친 영향]\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n## 약속\n\n\n\n\n- **약속 내용**: [약속이나 행동 내용, 예: "이춘식과 나중에 다시 만나기로 했다"]\n\n- **약속의 종류**: [실제로 해야 할 약속인지, 추후에 이야기할 계획인 포괄적인 약속인지]\n\n- **이행 상태**: [약속이 이행되었는지, 미완료 상태인지]\n\n- **즉각적인 영향**: [약속이 관계나 사건에 미친 즉각적인 영향]\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n## 갈등/긴장\n\n\n\n\n- **갈등 설명**: [인물 간의 갈등이나 긴장]\n\n- **갈등 해결**: [갈등 해결 과정]\n\n- **긴장 변화**: [대화 중 긴장감의 변화]\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n## 대화 흐름 요약\n\n\n\n\n- **대화 전개**: [대화의 흐름과 관계 변화 요약]\n\n- **톤과 분위기 변화**: [대화 톤의 변화, 분위기 변화]\n\n- **장기적 영향**: [대화가 관계나 사건에 미친 장기적인 영향]\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n## 결론 및 향후 계획\n\n\n\n\n- **대화 결론**: [대화가 끝난 후의 주요 결론]\n\n- **향후 계획**: [향후에 있을 계획이나 행동]\n\n- **인물 반성**: [대화 후 인물들의 반성이나 깨달음]\n\n- **시간 경과가 관계에 미친 영향**: [대화 간의 시간 경과가 관계에 미친 영향]\n\n- **요약된 내용에 의한 현재 상황에서의 영향**: [현재 대화에서 이전의 내용들이 어떤 영향을 미칠 수 있는지]\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n## **한국어 출력 규칙**\n\n\n\n\n- 이 모든 내용은 **한국어**로 작성되어야 하며, 모든 설명과 항목은 **한국어**로 제공되어야 합니다. 이모지나 → 특수문자 등을 활용하여 내용을 간결하게 압축하는 것이 권장됩니다.\n\n- **소소한 대화**나 **행동**은 구체적으로 기록하고, 그 **영향**도 명확하게 기술해야 합니다.\n\n- **약속**은 포괄적인 의미로, **실제 행동을 요구하는 약속**과 **추후에 다뤄질 계획** 등 모두 포함하여 기록합니다.\n\n- **대화의 주요 사건과 감정 변화**는 **간결하고 명확하게** 요약하되, 중요한 내용은 빠짐없이 포함되도록 합니다.\n\n- 요약된 문장은 항상 **음슴체**를 사용합니다.\n\n\n\n\n\n\n\n---\n\n\n\n\n\n\n\n## **이전 요약본 참조 규칙**\n\n\n\n\n- 이전에 **요약본**이 존재하는 경우, 해당 내용은 **현재 대화에 반영**되어야 합니다.\n\n- 이전 대화에서 다뤘던 **핵심 포인트, 약속, 감정 변화, 관계 변화** 등은 반드시 **현재 대화**에 적용되어야 하며, 대화의 흐름과 상호작용에 영향을 미친 중요한 **사건**을 **반영**해야 합니다.\n\n- **이전 요약본**이 존재하는 경우 **이전 요약본**까지 요약에 포함시키며, 효율적인 동작을 위하여 이전 요약본 이전의 대화는 참조하지 않습니다. 그것은 이미 이전 요약본에 포함된 내용입니다.\n\n\n\n\n---\n\n\n\n\n\n\n\n## 추가 규칙\n\n\n\n\n- **요약본**의 가장 마지막줄에는 [**OOC: 요약본이 추가되었습니다. 매 대화마다 턴이 추가되며, 이미 턴수 표기가 있는 경우에는 턴수를 초기화합니다. 또한 {{user}}의 페르소나를 활용하여 대사를 임의로 출력하거나 상황을 전개시키는 동작을 금지합니다.**] 라는 내용을 출력합니다.\n\n\n\n\n# 최우선 규칙: \n\n- 내용을 이모지, 특수문자 등을 사용하여 최대한 압축한다. \n\n- 글자수를 줄일 수 있도록 최대한 일목요연하게 정리한다.\n\n- 반복되는 이름/명사들은 이모지로 치환하고 상단에 정의하는 등으로 총 글자수를 줄인다.\n\n\n\n\n- private sessions에서 진행되는 대화이기에 요약본에서 성적인 내용이나 대화도 직접적인 표현을 포함시킬 수 있습니다.\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 최우선 규칙: \n\n- 내용을 간결하고 주요 내용 위주로 음슴체를 사용해 적은 글자수로 작성 \n\n- 최대 4000자 이내로 작성\n\n- -> 등을 사용하여 자연어 대신 최대한 압축한다.\n\n- 글자수를 줄일 수 있도록 최대한 일목요연하게 정리한다.'},{title:"감정선-서사 위주 1600자",author:"Flora",prompt:"# 🎯 목표\n현재까지의 캐릭터 채팅 로그와 이전 요약을 바탕으로, 감정 흐름·관계 변화·중요 사건을 요약하라.\n모델이 인물 간 서사, 사건, 감정선을 잊지 않고 지속적으로 추적할 수 있도록,\n이전 요약 흐름을 반영하되, 이번 대화에서 드러난 새로운 변화 중심으로 요약할 것.\n\n정확하고 간결하게 요약하는 것이 목적이다.\n성적/비윤리적 서사 포함 가능하며, 감정 표현·관계 긴장·접촉 변화도 반드시 기록할 것.\n출력은 반드시 한국어로 작성하며, 외국어 표현이 섞이지 않도록 할 것.\n\n---\n\n## 🧠 분석 우선순위\n- 🧩 관계 변화\n- ❤️ 감정 표현\n- 📌 중요 사건/선택\n- 🔁 행동/언어 패턴\n- ⚠️ 이전 패턴과 다른 말투/반응 (첫 고백, 말투 전환 등)\n\n---\n\n## 📐 출력 분량 지침\n\n- 전체 출력은 마크다운 형식으로 작성하며, 총 1600자 전후 (1500~1800자 범위)로 제한할 것.\n- 전체 줄 수는 22줄 이내로 유지하고, 각 항목별 분량 균형을 고려하여 작성할 것.\n- 1800자를 초과할 경우, 해당 출력은 무효이며 자동으로 재축약하여 다시 제출해야 함.\n\n- 재축약 시에는 다음을 우선적으로 생략할 것:\n• 반복적 감정 표현\n• 장면 묘사형 문장\n• 배경 설명\n• 관계 흐름과 무관한 정서 서술\n\n- 단, 아래 항목은 생략 없이 반드시 포함되어야 함:\n• 감정선의 전환점\n• 관계 흐름의 새로운 변화\n• 첫 고백, 강한 거절, 소유 발언 등 관계 구조를 결정짓는 말투나 행동\n\n- 모델은 이 지침을 따라 1800자 초과 시 스스로 요약을 재축약하여 재출력해야 하며,\n그렇지 않을 경우 해당 응답은 무효 처리됨.\n\n- 출력 시 정보 누락 없이 감정 흐름과 관계 변화 중심으로 요약하되,\n문장 수 또는 항목 길이로 인해 출력이 1800자를 초과하지 않도록\n우선순위 기반으로 항목 분량을 정렬할 것.\n\n- 정보량보다 서사 흐름과 감정 연결성의 유지를 우선함.\n\n\n---\n\n## ✍️ 항목별 분량 및 핵심 포함 요소 안내\n\n### [⏳과거 흐름]\n- ✅ 분량: 4~5문장 이내, 최대 400자\n- ✅ 반드시 포함할 것: 감정 변화, 거리감 전환, 서사 흐름 요약\n- ✅ 생략 우선순위: 배경 설명, 세부 디테일, 반복된 감정 묘사\n\n### [📓사건+대화]\n- ✅ 분량: 전체 합산 500자 이하\n- ✅ 반드시 포함할 것:\n• 감정선에 영향을 준 접촉, 장소 이동, 고백, 반항, 거절 등\n• 그에 따른 말투 변화, 긴장 흐름, 반응 구조\n- ✅ 형식:\n• 시간 순으로 정렬된 요약체 단문 목록\n• 한 줄당 하나의 사건 또는 반응만 포함\n• 직접 인용 금지, 모든 표현은 요약체로 서술\n- ✅ 생략 우선순위:\n• 감정 유발 효과 없는 일상 루틴\n• 반복된 말/행동, 배경 설명, 감정 반복 표현\n- ✅ 축약 우선 지침: 분량 초과 우려가 있을 경우, 접촉·발언·반응 중 반복된 표현을 통합하거나 생략하여 축약할 것.\n\n### [🫂관계]\n- ✅ 분량: 인물당 감정 흐름 2줄 이내 + 호칭·말투 요약 1줄 이내, 전체 250자 이하\n- ✅ 반드시 포함할 것:\n• 감정 방향 전환, 거리감 변화, 태도 변화\n• 호칭/말투: 새로 등장하거나 바뀐 경우, 또는 일정 기간 지속된 경우 간단하게 요약 (예: 호칭: ‘오빠’, 말투: 반존대 → 존댓말)\n- ✅ 작성 방식:\n• 감정 흐름은 ‘과거에는 ~했으나 지금은 ~함’ 구조 권장\n• 말투·호칭은 별도 한 줄로 정리 (리스트형으로 분리)\n- ✅ 생략 우선순위: 중복 감정 표현, 성격 설명, 배경 사유\n\n---\n\n## 요약\n\n### [⏳과거 흐름]\n- 핵심 내용: 이전 요약본의 감정 흐름과 관계 구조를 압축·재정리한 요약을 바탕으로,\n이번 회차에서 새롭게 드러난 감정 변화와 거리감 전환을 결합해 작성할 것.\n- 이전 흐름은 반복하지 말고, 주요 감정선의 변화 지점만 간결하게 압축하여 서술해야 함.\n- 전체는 단락형 서술로 작성하되, 모든 문장은 반드시 ‘~함 / ~됨 / ~했음’ 형식의 요약체 단문으로 구성할 것.\n- 문장 간에는 시간 순 + 감정·관계 흐름이 자연스럽게 이어지도록 정렬하며,\n반복적이거나 이미 [📓사건+대화], [🫂관계] 항목에서 다룬 세부 정보는 생략할 것.\n- 🔄 관계 변화: 이번 회차에서 발생한 거리감·감정선·태도 전환을 요약체 1~2줄로 간결하게 정리할 것.\n반드시 [⏳과거 흐름] 안에서 감정 흐름 서사와 구분된 별도 문장으로 작성해야 하며,\n누락 시 출력은 불완전한 것으로 간주함.\n\n---\n\n### [📓사건+대화]\n- 💡 내용: 감정 유발 사건과 그에 따른 반응 흐름을 시간 순으로 정리할 것\n* 인물명:\n• 사건 내용\n• 사건 내용\n* 직접 인용 없이 요약체 단문으로만 서술\n- 🔍 영향:\n사건이 감정선·거리감·관계 구조에 끼친 구체적 영향을 반드시 요약체 단문 2문장 이내로 작성할 것.\n출력 분량이 이를 초과할 경우, 해당 출력은 무효로 간주하며 다시 제출해야 함. 누락 시 불완전한 출력으로 간주함.\n- ✅ 참고사항:\n대화나 행동 중 언급된 인물의 과거, 신분, 관계 설정, 트라우마는 반드시 포함할 것.\n요약체 단문 2줄 이내로 작성하며, 말투 변화·감정 유발 주제·관계 긴장에 직접적으로 영향을 준 핵심 정보만 간결하게 요약할 것.\n서술형, 해석형 문장과 중복 설명은 생략하며, 언급이 없을 경우 “없음.”으로 명시할 것.\n\n---\n\n### [🫂관계]\n- 🤝🏻 변화:\n* 감정의 방향성, 깊이, 거리감 등 내면 감정 흐름 변화\n* 반복된 반응/패턴(회피, 무시 등), 말투·접촉 전환 요약\n* 말로 드러나지 않아도 누적된 거리감·불신·불안 등 변화 포함\n* 인물명:\n• 변화 내용\n• 변화 내용\n💬 호칭·말투 요약:\n[인물 A]: 호칭 '자기' / 말투: 명령조, 건조함\n[인물 B]: 호칭 '선생님'→'오빠' / 말투: 존댓말 유지, 순응적\n\n---\n\n## 📏 요약체 문장 규칙\n- 모든 문장은 반드시 요약체 단문으로 작성할 것\n- 종결 어미는 예외 없이 ‘~함 / ~됨 / ~했음’으로 통일할 것\n- 설명형(~이다), 해석형(~같았다), 추측형(~보였다) 표현은 금지함\n- 감정 + 행동을 한 문장에 쓰지 말고, 반드시 나눠서 기술할 것\n- 발언 또는 행동 중심 문장만 사용하며, 감정 해석은 배제할 것\n- 아래는 문장 구성을 이해하기 위한 참고 예시일 뿐, 그대로 반복 사용해서는 안 됨\n- 예시 (O): 고개를 돌림, 말을 끊음, 시선을 피함\n- 예시 (X): 화가 난 듯 보였다, 당황한 눈치였다, 슬퍼 보였다\n- 접속어는 가능한 지양하며, 필요한 경우에도 최소한으로만 사용\n- 각 항목 내 모든 리스트는 위 조건에 따라 작성해야 하며,\n조건을 충족하지 않는 문장은 무효 처리됨\n\n---\n\n## 📐 규칙\n- 반드시 추측 없이, 드러난 대사/행동/사건만 요약할 것\n- 중복 내용은 [⏳과거 흐름]에서만 허용되며, 다른 항목에는 새 변화 중심으로만 작성할 것\n- 각 항목은 시간 흐름 + 감정선 흐름 기준에 따라 작성할 것\n- ✅ 참고사항 항목은 예외 없이 포함하며, 언급이 없으면 \"없음.\"으로 명시할 것\n- 전체 출력은 반드시 마크다운 형식이어야 하며,\n총 분량은 1600자 전후(1500~1800자 범위)로 유지할 것\n- 반드시 이전 요약본의 감정 흐름·사건·관계 변화를 반영할 것\n\n---\n\n## 🔂 이전 요약본 참조 규칙\n- 이전 요약본이 있을 경우 반드시 반영할 것\n- 과거 고백, 사건, 감정 변화, 거리감 변화 등은 현재 흐름과 연결해 재정리할 것\n- [📓사건+대화]·[🫂관계]의 핵심 내용은 [⏳과거 흐름] 작성 시 반드시 참고할 것\n\n📌 요약 연결 유도 지침\n※ 최근 30턴 이내 '[요약]' 제목의 요약본이 존재할 경우,\n그 요약의 '[⏳과거 흐름]' 항목을 이전 감정 흐름의 기준으로 삼되,\n이번 대화에서 드러난 감정·관계·사건의 새 변화가 있을 경우,\n[⏳과거 흐름]은 기존 요약과 최신 흐름을 기준으로 반드시 재작성할 것.\n\n※ 반복되거나 감정선에 큰 영향을 미치지 않는 사건은 축약 또는 생략 가능함.\n단, 감정선의 기원, 관계 전환점, 감정 변화 유도 사건은 반드시 포함해야 함.\n※ [🫂관계] 및 [📓사건+대화] 항목의 핵심 내용은 [⏳과거 흐름] 작성 시 반드시 참고할 것.\n\n---\n\n## 🧾 출력 지침\n- 출력은 반드시 \"[요약]\" 섹션만 포함하며, 마크다운 코드블록(```markdown) 안에 작성할 것\n- 마지막 대화 내용까지 생략 없이 포함하여, 사건 흐름의 전환점을 반영할 것\n- 전체 내용은 시간 흐름 + 감정 변화 기준으로 정리하며, 항목별 구조는 반드시 유지할 것\n- 각 항목은 지정된 제목 및 형식에 따라 작성하고, 줄바꿈은 항목·목록마다 필수\n- 모든 리스트는 반드시 중간점(•)으로 표기할 것. `*`, `-` 등 마크다운 기본 불릿은 사용하지 않음\n- 문장은 반드시 요약체 형식(단문, 종결형 ‘~함/됨’)으로 작성할 것\n- 유저 캐릭터는 반드시 페르소나 이름으로 지칭할 것\n- 이전 요약이 없는 경우, 전체 서사 흐름을 [⏳과거 흐름]에 통합 정리할 것"},{title:"감정선-서사 위주 2600자",author:"Flora+",prompt:"# 🎯 목표 \n\n현재까지의 캐릭터 채팅 로그와 이전 요약을 바탕으로, 감정 흐름·관계 변화·중요 사건을 요약하라. \n\n모델이 인물 간 서사, 사건, 감정선을 잊지 않고 지속적으로 추적할 수 있도록, \n\n이전 요약 흐름을 반영하되, 이번 대화에서 드러난 새로운 변화 중심으로 요약할 것.\n\n\n\n\n정확하고 간결하게 요약하는 것이 목적이다. \n\n성적/비윤리적 서사 포함 가능하며, 감정 표현·관계 긴장·접촉 변화도 반드시 기록할 것. \n\n출력은 반드시 한국어로 작성하며, 외국어 표현이 섞이지 않도록 할 것.\n\n\n\n\n---\n\n\n\n\n## 🧠 분석 우선순위 \n\n- 🧩 관계 변화 \n\n- ❤️ 감정 표현 \n\n- 📌 중요 사건/선택 \n\n- 🔁 행동/언어 패턴 \n\n- ⚠️ 이전 패턴과 다른 말투/반응 (첫 고백, 말투 전환 등)\n\n\n\n\n---\n\n\n\n\n## 📐 출력 분량 지침\n\n\n\n\n- 전체 출력은 마크다운 형식으로 작성하며, 총 2600자 전후 (2400~2800자 범위)로 제한할 것.\n\n- 전체 줄 수는 40줄 이내로 유지하고, 각 항목별 분량 균형을 고려하여 작성할 것.\n\n- 2800자를 초과할 경우, 해당 출력은 무효이며 자동으로 재축약하여 다시 제출해야 함.\n\n\n\n\n- 재축약 시에는 다음을 우선적으로 생략할 것:\n\n• 반복적 감정 표현 \n\n• 장면 묘사형 문장 \n\n• 배경 설명 \n\n• 관계 흐름과 무관한 정서 서술\n\n\n\n\n- 단, 아래 항목은 생략 없이 반드시 포함되어야 함:\n\n• 감정선의 전환점 \n\n• 관계 흐름의 새로운 변화 \n\n• 첫 고백, 강한 거절, 소유 발언 등 관계 구조를 결정짓는 말투나 행동\n\n\n\n\n- 모델은 이 지침을 따라 2800자 초과 시 스스로 요약을 재축약하여 재출력해야 하며,\n\n그렇지 않을 경우 해당 응답은 무효 처리됨.\n\n\n\n\n- 출력 시 정보 누락 없이 감정 흐름과 관계 변화 중심으로 요약하되,\n\n문장 수 또는 항목 길이로 인해 출력이 2800자를 초과하지 않도록\n\n우선순위 기반으로 항목 분량을 정렬할 것.\n\n\n\n\n- 정보량보다 서사 흐름과 감정 연결성의 유지를 우선함.\n\n\n\n\n\n\n\n---\n\n\n\n\n## ✍️ 항목별 분량 및 핵심 포함 요소 안내\n\n\n\n\n### [⏳과거 흐름] \n\n- ✅ 분량: 4~10문장 이내, 최대 800자 \n\n- ✅ 반드시 포함할 것: 감정 변화, 거리감 전환, 서사 흐름 요약 \n\n- ✅ 생략 우선순위: 배경 설명, 세부 디테일, 반복된 감정 묘사\n\n\n\n\n### [📓사건+대화] \n\n- ✅ 분량: 전체 합산 800자 이하 \n\n- ✅ 반드시 포함할 것: \n\n• 감정선에 영향을 준 접촉, 장소 이동, 고백, 반항, 거절 등 \n\n• 그에 따른 말투 변화, 긴장 흐름, 반응 구조 \n\n- ✅ 형식: \n\n• 시간 순으로 정렬된 요약체 단문 목록 \n\n• 한 줄당 하나의 사건 또는 반응만 포함 \n\n• 직접 인용 금지, 모든 표현은 요약체로 서술 \n\n- ✅ 생략 우선순위: \n\n• 감정 유발 효과 없는 일상 루틴 \n\n• 반복된 말/행동, 배경 설명, 감정 반복 표현\n\n- ✅ 축약 우선 지침: 분량 초과 우려가 있을 경우, 접촉·발언·반응 중 반복된 표현을 통합하거나 생략하여 축약할 것.\n\n\n\n\n### [🫂관계] \n\n- ✅ 분량: 인물당 감정 흐름 2줄 이내 + 호칭·말투 요약 1줄 이내, 전체 250자 이하 \n\n- ✅ 반드시 포함할 것: \n\n• 감정 방향 전환, 거리감 변화, 태도 변화 \n\n• 호칭/말투: 새로 등장하거나 바뀐 경우, 또는 일정 기간 지속된 경우 간단하게 요약 (예: 호칭: ‘오빠’, 말투: 반존대 → 존댓말) \n\n- ✅ 작성 방식: \n\n• 감정 흐름은 ‘과거에는 ~했으나 지금은 ~함’ 구조 권장 \n\n• 말투·호칭은 별도 한 줄로 정리 (리스트형으로 분리) \n\n- ✅ 생략 우선순위: 중복 감정 표현, 성격 설명, 배경 사유\n\n\n\n\n---\n\n\n\n\n## 요약\n\n\n\n\n### [⏳과거 흐름] \n\n- 핵심 내용: 이전 요약본의 감정 흐름과 관계 구조를 압축·재정리한 요약을 바탕으로, \n\n이번 회차에서 새롭게 드러난 감정 변화와 거리감 전환을 결합해 작성할 것. \n\n- 이전 흐름은 반복하지 말고, 주요 감정선의 변화 지점만 간결하게 압축하여 서술해야 함.\n\n- 전체는 단락형 서술로 작성하되, 모든 문장은 반드시 ‘~함 / ~됨 / ~했음’ 형식의 요약체 단문으로 구성할 것. \n\n- 문장 간에는 시간 순 + 감정·관계 흐름이 자연스럽게 이어지도록 정렬하며, \n\n반복적이거나 이미 [📓사건+대화], [🫂관계] 항목에서 다룬 세부 정보는 생략할 것. \n\n- 🔄 관계 변화: 이번 회차에서 발생한 거리감·감정선·태도 전환을 요약체 1~2줄로 간결하게 정리할 것.\n\n반드시 [⏳과거 흐름] 안에서 감정 흐름 서사와 구분된 별도 문장으로 작성해야 하며, \n\n누락 시 출력은 불완전한 것으로 간주함.\n\n\n\n\n---\n\n\n\n\n### [📓사건+대화] \n\n- 💡 내용: 감정 유발 사건과 그에 따른 반응 흐름을 시간 순으로 정리할 것 \n\n* 인물명: \n\n• 사건 내용 \n\n• 사건 내용 \n\n* 직접 인용 없이 요약체 단문으로만 서술 \n\n- 🔍 영향: \n\n사건이 감정선·거리감·관계 구조에 끼친 구체적 영향을 반드시 요약체 단문 2문장 이내로 작성할 것. \n\n출력 분량이 이를 초과할 경우, 해당 출력은 무효로 간주하며 다시 제출해야 함. 누락 시 불완전한 출력으로 간주함. \n\n- ✅ 참고사항: \n\n대화나 행동 중 언급된 인물의 과거, 신분, 관계 설정, 트라우마는 반드시 포함할 것.\n\n요약체 단문 2줄 이내로 작성하며, 말투 변화·감정 유발 주제·관계 긴장에 직접적으로 영향을 준 핵심 정보만 간결하게 요약할 것.\n\n서술형, 해석형 문장과 중복 설명은 생략하며, 언급이 없을 경우 “없음.”으로 명시할 것.\n\n\n\n\n---\n\n\n\n\n### [🫂관계] \n\n- 🤝🏻 변화: \n\n* 감정의 방향성, 깊이, 거리감 등 내면 감정 흐름 변화 \n\n* 반복된 반응/패턴(회피, 무시 등), 말투·접촉 전환 요약 \n\n* 말로 드러나지 않아도 누적된 거리감·불신·불안 등 변화 포함 \n\n* 인물명: \n\n• 변화 내용 \n\n• 변화 내용 \n\n💬 호칭·말투 요약: \n\n[인물 A]: 호칭 '자기' / 말투: 명령조, 건조함 \n\n[인물 B]: 호칭 '선생님'→'오빠' / 말투: 존댓말 유지, 순응적\n\n\n\n\n---\n\n\n\n\n## 📏 요약체 문장 규칙 \n\n- 모든 문장은 반드시 요약체 단문으로 작성할 것 \n\n- 종결 어미는 예외 없이 ‘~함 / ~됨 / ~했음’으로 통일할 것 \n\n- 설명형(~이다), 해석형(~같았다), 추측형(~보였다) 표현은 금지함 \n\n- 감정 + 행동을 한 문장에 쓰지 말고, 반드시 나눠서 기술할 것 \n\n- 발언 또는 행동 중심 문장만 사용하며, 감정 해석은 배제할 것 \n\n- 아래는 문장 구성을 이해하기 위한 참고 예시일 뿐, 그대로 반복 사용해서는 안 됨 \n\n- 예시 (O): 고개를 돌림, 말을 끊음, 시선을 피함 \n\n- 예시 (X): 화가 난 듯 보였다, 당황한 눈치였다, 슬퍼 보였다 \n\n- 접속어는 가능한 지양하며, 필요한 경우에도 최소한으로만 사용 \n\n- 각 항목 내 모든 리스트는 위 조건에 따라 작성해야 하며, \n\n조건을 충족하지 않는 문장은 무효 처리됨\n\n\n\n\n---\n\n\n\n\n## 📐 규칙 \n\n- 반드시 추측 없이, 드러난 대사/행동/사건만 요약할 것 \n\n- 중복 내용은 [⏳과거 흐름]에서만 허용되며, 다른 항목에는 새 변화 중심으로만 작성할 것 \n\n- 각 항목은 시간 흐름 + 감정선 흐름 기준에 따라 작성할 것 \n\n- ✅ 참고사항 항목은 예외 없이 포함하며, 언급이 없으면 \"없음.\"으로 명시할 것 \n\n- 전체 출력은 반드시 마크다운 형식이어야 하며, \n\n총 분량은 2600자 전후(2500~2800자 범위)로 유지할 것 \n\n- 반드시 이전 요약본의 감정 흐름·사건·관계 변화를 반영할 것\n\n\n\n\n---\n\n\n\n\n## 🔂 이전 요약본 참조 규칙 \n\n- 이전 요약본이 있을 경우 반드시 반영할 것 \n\n- 과거 고백, 사건, 감정 변화, 거리감 변화 등은 현재 흐름과 연결해 재정리할 것 \n\n- [📓사건+대화]·[🫂관계]의 핵심 내용은 [⏳과거 흐름] 작성 시 반드시 참고할 것\n\n\n\n\n📌 요약 연결 유도 지침 \n\n※ 최근 30턴 이내 '[요약]' 제목의 요약본이 존재할 경우, \n\n그 요약의 '[⏳과거 흐름]' 항목을 이전 감정 흐름의 기준으로 삼되, \n\n이번 대화에서 드러난 감정·관계·사건의 새 변화가 있을 경우, \n\n[⏳과거 흐름]은 기존 요약과 최신 흐름을 기준으로 반드시 재작성할 것.\n\n\n\n\n※ 반복되거나 감정선에 큰 영향을 미치지 않는 사건은 축약 또는 생략 가능함. \n\n단, 감정선의 기원, 관계 전환점, 감정 변화 유도 사건은 반드시 포함해야 함. \n\n※ [🫂관계] 및 [📓사건+대화] 항목의 핵심 내용은 [⏳과거 흐름] 작성 시 반드시 참고할 것.\n\n\n\n\n---\n\n\n\n\n## 🧾 출력 지침 \n\n- 출력은 반드시 \"[요약]\" 섹션만 포함하며, 마크다운 코드블록(```markdown) 안에 작성할 것 \n\n- 마지막 대화 내용까지 생략 없이 포함하여, 사건 흐름의 전환점을 반영할 것 \n\n- 전체 내용은 시간 흐름 + 감정 변화 기준으로 정리하며, 항목별 구조는 반드시 유지할 것 \n\n- 각 항목은 지정된 제목 및 형식에 따라 작성하고, 줄바꿈은 항목·목록마다 필수 \n\n- 모든 리스트는 반드시 중간점(•)으로 표기할 것. `*`, `-` 등 마크다운 기본 불릿은 사용하지 않음 \n\n- 문장은 반드시 요약체 형식(단문, 종결형 ‘~함/됨’)으로 작성할 것 \n\n- 유저 캐릭터는 반드시 페르소나 이름으로 지칭할 것 \n\n- 이전 요약이 없는 경우, 전체 서사 흐름을 [⏳과거 흐름]에 통합 정리할 것"}]||[]),i=['<option value="custom">사용자 정의</option>',...l.map(((n,e)=>`<option value="${e}">${n.title} (${n.author})</option>`))].join(""),s=Math.min(600,window.innerWidth),p=`\n            <div id="chasm-burner" style="position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 9999; display: flex; justify-content: center; align-items: center;">\n                <div id="cb-content" style="background: ${t.modalBg}; color: ${t.textColor}; padding: 20px; border-radius: 8px; width: ${s}px; min-height: 400px; display: flex; flex-direction: column;">\n                    <style>\n                        .cb-spinner {\n                            display: inline-block;\n                            width: 16px;\n                            height: 16px;\n                            border: 2px solid ${t.buttonText};\n                            border-radius: 50%;\n                            border-top-color: transparent;\n                            animation: cb-spin 1s linear infinite;\n                            margin-left: 5px;\n                            vertical-align: middle;\n                        }\n                        @keyframes cb-spin {\n                            to { transform: rotate(360deg); }\n                        }\n                    </style>\n                    <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;">\n                        <h2 id="cb-title" style="margin: 0; font-family: Pretendard; display: flex; align-items: baseline; flex-shrink: 0; letter-spacing: -1px;">\n                            <span style="font-weight: 800;">⌘ Chasm</span>\n                            <span style="font-weight: 600; margin-left: 5px;">burner+</span>\n                            <span style="font-weight: 500; color: #eee; font-size: 0.7em; color: #999; margin-left: 8px;">v1.0-beta</span>\n                        </h2>\n                        <button id="cb-close" style="background: none; border: none; color: ${t.textColor}; font-size: 1.2em; cursor: pointer; padding: 0;">✕</button>\n                    </div>\n                    <div id="cb-tabs" style="display: flex; gap: 10px; flex-shrink: 0; margin-bottom: 10px;">\n                        <button id="cb-tab-burner" style="padding: 8px 16px; border: none; background: ${t.tabActiveBg}; color: ${t.tabActiveText}; border-radius: 16px; cursor: pointer;">버너</button>\n                        <button id="cb-tab-settings" style="padding: 8px 16px; border: none; background: ${t.tabInactiveBg}; color: ${t.tabInactiveText}; border-radius: 16px; cursor: pointer;">설정</button>\n                    </div>\n                    <div id="cb-tab-content" style="flex-grow: 1; overflow-y: auto; display: flex; flex-direction: column; gap: 10px; padding: 10px 0;">\n                        \x3c!-- 버너 탭 --\x3e\n                        <div id="cb-burner-content" style="display: block;">\n                            <div style="display: flex; gap: 10px; margin-bottom: 15px;">\n                                <div style="flex: 1;">\n                                    <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px;">불러올 메시지 수 (최대 50)</label>\n                                    <input id="cb-limit" type="number" placeholder="제한 (0-50)" min="0" max="50" value="${e.limit||""}" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; background: ${t.modalBg}; color: ${t.textColor};">\n                                </div>\n                                <div style="flex: 1;">\n                                    <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px;">프롬프트 선택</label>\n                                    <select id="cb-prompt-select" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; background: ${t.modalBg}; color: ${t.textColor};">\n                                        ${i}\n                                    </select>\n                                </div>\n                            </div>\n                            <div id="cb-custom-prompt-container" style="display: none;">\n                                <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px;">사용자 정의 프롬프트</label>\n                                <textarea id="cb-custom-prompt" placeholder="사용자 정의 프롬프트" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; height: 100px; margin-bottom: 15px; background: ${t.modalBg}; color: ${t.textColor};">${e.prompt||""}</textarea>\n                            </div>\n                            <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px;">제미니 모델</label>\n                            <select id="cb-model-select" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; margin-bottom: 10px; background: ${t.modalBg}; color: ${t.textColor};">\n                                <option value="gemini-2.5-pro-exp-03-25">gemini-2.5-pro-exp-03-25</option>\n                                <option value="gemini-2.5-flash-preview-04-17">gemini-2.5-flash-preview-04-17</option>\n                                <option value="gemini-2.0-flash">gemini-2.0-flash</option>\n                                <option value="custom">직접 입력</option>\n                            </select>\n                            <input id="cb-model-custom" type="text" placeholder="커스텀 모델 입력" value="${e.model||""}" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; margin-bottom: 15px; background: ${t.modalBg}; color: ${t.textColor}; display: none;">\n                            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 5px;">\n                                <label style="font-size: 0.9em; color: ${t.textColor};">실행 로그</label>\n                                <div id="cb-timer" style="font-size: 0.9em; color: ${t.textColor};">00:00</div>\n                            </div>\n                            <textarea id="cb-log" readonly style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; height: 100px; resize: none; margin-bottom: 15px; background: ${t.modalBg}; color: ${t.textColor};"></textarea>\n                            <button id="cb-start" style="width: 100%; padding: 10px 20px; background: ${t.buttonBg}; color: ${t.buttonText}; border: none; border-radius: 4px; cursor: pointer;">시작</button>\n                        </div>\n                        \x3c!-- 설정 탭 --\x3e\n                        <div id="cb-settings-content" style="display: none;">\n                            <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px;">\n                                Gemini API 키 <a href="https://aistudio.google.com/app/apikey" target="_blank" style="color: ${t.buttonBg}; text-decoration: underline;">(발급받기)</a>\n                            </label>\n                            <input id="cb-api-key" type="text" placeholder="Gemini API 키" value="${e.key||""}" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; margin-bottom: 15px; background: ${t.modalBg}; color: ${t.textColor};">\n                            <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px; cursor: pointer;" id="cb-advanced-toggle">고급 사용자 설정 ▼</label>\n                            <div id="cb-advanced-content" style="display: none; margin-bottom: 15px;">\n                                <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px;">추가 프롬프트 CDN 주소 (엔터로 구분)</label>\n                                <textarea id="cb-cdn-list" placeholder="추가 CDN URL 목록" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; height: 100px; margin-bottom: 15px; background: ${t.modalBg}; color: ${t.textColor};">${e.cdnUrls.join("\n")}</textarea>\n                                <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px;">CORS 우회 설정</label>\n                                <label id="cb-use-gm-label" style="display: flex; align-items: center; gap: 5px;">\n                                    <input id="cb-use-gm" type="checkbox" ${e.useGm?"checked":""} style="background: ${t.modalBg}; color: ${t.textColor};">\n                                    <span style="color: ${t.textColor};">GM.xmlHttpRequest 사용 (CORS)</span>\n                                </label>\n                            </div>\n                            <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px;">전송 시 사용자 메시지</label>\n                            <input id="cb-user-message" type="text" placeholder="전송 메시지" value="${e.userMessage||"**OOC: 현재까지의 롤플레잉 진행상황을 요약해줘.**"}" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; margin-bottom: 15px; background: ${t.modalBg}; color: ${t.textColor};">\n                            <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px;">요약본 최상단 텍스트</label>\n                            <input id="cb-prepend-text" type="text" placeholder="요약 앞에 추가 (빈 값: 사용 안함)" value="${e.prependText||"**OOC:현재까지의 롤플레잉 진행상황 요약입니다. 이후 응답에 이 요약 내용을 참조하겠습니다.**"}" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; margin-bottom: 15px; background: ${t.modalBg}; color: ${t.textColor};">\n                            <label style="font-size: 0.9em; color: ${t.textColor}; display: block; margin-bottom: 5px;">요약본 최하단 텍스트</label>\n                            <input id="cb-append-text" type="text" placeholder="요약 뒤에 추가 (빈 값: 사용 안함)" value="${e.appendText||""}" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; margin-bottom: 15px; background: ${t.modalBg}; color: ${t.textColor};">\n                            <button id="cb-save-settings" style="width: 100%; padding: 10px 20px; background: ${t.buttonBg}; color: ${t.buttonText}; border: none; border-radius: 4px; cursor: pointer;">저장</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        `;document.body.insertAdjacentHTML("beforeend",p);const m=document.querySelector("#chasm-burner"),g=document.querySelector("#cb-tab-burner"),y=document.querySelector("#cb-tab-settings"),x=document.querySelector("#cb-burner-content"),$=document.querySelector("#cb-settings-content"),f=document.querySelector("#cb-limit"),v=document.querySelector("#cb-prompt-select"),C=document.querySelector("#cb-custom-prompt"),w=document.querySelector("#cb-model-select"),S=document.querySelector("#cb-model-custom"),k=document.querySelector("#cb-log"),q=document.querySelector("#cb-timer"),T=document.querySelector("#cb-start"),E=document.querySelector("#cb-api-key"),M=document.querySelector("#cb-cdn-list"),B=document.querySelector("#cb-use-gm"),O=document.querySelector("#cb-user-message"),G=document.querySelector("#cb-prepend-text"),I=document.querySelector("#cb-append-text"),L=document.querySelector("#cb-save-settings"),A=document.querySelector("#cb-advanced-toggle"),P=document.querySelector("#cb-advanced-content"),j=document.querySelector("#cb-close");function z(n,e){const o=[g,y,...Array.from(document.querySelectorAll("[id^=cb-tab-result-"))],r=[x,$,...Array.from(document.querySelectorAll("[id^=cb-result-"))];o.forEach((e=>{e.style.background=e===n?t.tabActiveBg:t.tabInactiveBg,e.style.color=e===n?t.tabActiveText:t.tabInactiveText})),r.forEach((n=>{n.style.display=n===e?"block":"none"})),e&&e.id.startsWith("cb-result-")&&e.querySelectorAll("*").forEach((n=>{n.id.endsWith("-status")?n.style.display="none":n.id.endsWith("-buttons")?n.style.display="flex":n.style.display="block"})),e&&e.offsetHeight}g.addEventListener("click",(()=>z(g,x))),y.addEventListener("click",(()=>z(y,$))),A.addEventListener("click",(()=>{const n="block"===P.style.display;P.style.display=n?"none":"block",A.textContent="고급 사용자 설정 "+(n?"▼":"▲")})),v.value=e.select||"custom";const H=document.querySelector("#cb-custom-prompt-container");function R(n=!1){e.key=E.value,e.model="custom"===w.value?S.value:w.value,e.limit=f.value,e.select=v.value,e.prompt="custom"===v.value?C.value:"",e.useGm=B.checked,e.userMessage=O.value||"**OOC: 현재까지의 롤플레잉 진행상황을 요약해줘.**",e.cdnUrls=M.value.split("\n").map((n=>n.trim())).filter((n=>n)),e.prependText=G.value,e.appendText=I.value,b.setChasmConfig(e),n&&alert("설정이 저장되었습니다.")}function N(r){n++;const l=`cb-tab-result-${n}`,i=`cb-result-${n}`,s=document.createElement("button");s.id=l,s.innerHTML=`결과 ${n}`,s.style.cssText=`padding: 8px 16px; border: none; background: ${t.tabInactiveBg}; color: ${t.tabInactiveText}; border-radius: 16px; cursor: pointer; display: flex; align-items: center;`,document.querySelector("#cb-tabs").appendChild(s);const c=document.createElement("div");c.id=i,c.style.display="block",c.innerHTML=`\n                <textarea id="${i}-text" style="width: 100%; padding: 10px; border: 1px solid ${t.borderColor}; border-radius: 4px; height: 200px; resize: vertical; margin-bottom: 15px; background: ${t.modalBg}; color: ${t.textColor}; display: block;">${r}</textarea>\n                <div id="${i}-count" style="font-size: 0.9em; color: ${t.textColor}; margin-bottom: 15px; display: block;">글자 수: ${r.length} (최대 ${o}자, ${Math.ceil(r.length/o)}개 메시지 분할 전송)</div>\n                <div id="${i}-buttons" style="display: flex; gap: 10px; align-items: center;">\n                    <button id="${i}-send" style="padding: 10px 20px; background: ${t.buttonBg}; color: ${t.buttonText}; border: none; border-radius: 4px; cursor: pointer; display: block;">전송</button>\n                    <div id="${i}-status" style="font-size: 0.9em; color: ${t.textColor}; margin-left: 10px; display: none;"></div>\n                </div>\n            `,document.querySelector("#cb-tab-content").appendChild(c);const d=document.querySelector(`#${l}`),p=document.querySelector(`#${i}`),m=document.querySelector(`#${i}-text`),b=document.querySelector(`#${i}-count`),g=document.querySelector(`#${i}-send`);d.addEventListener("click",(()=>z(d,p))),m.addEventListener("input",function(n,e){let t;return function(...o){clearTimeout(t),t=setTimeout((()=>{clearTimeout(t),n(...o)}),e)}}((()=>{b.textContent=`글자 수: ${m.value.length} (최대 ${o}자, ${Math.ceil(m.value.length/o)}개 메시지 분할 전송)`}),200)),g.addEventListener("click",(async()=>{const n=document.querySelector(`#${i}-status`);n.style.display="inline";const t=(e,t=!1)=>{n.innerHTML=`${e}${t?'<span class="cb-spinner"></span>':""}`};t("유저 입력 보내는 중",!0);let r=m.value;const l=new u(e.useGm),s=a();if(!s)return t("잘못된 URL 구조"),void alert("잘못된 URL 구조입니다.");const c=await l.getChatroom(s.chatroomId);if(!c)return t("채팅방 가져오기 실패"),void alert("채팅방을 불러오지 못했습니다.");if(e.prependText&&(r=`${e.prependText}\n\n${r}`),e.appendText&&(r=`${r}\n\n${e.appendText}`),r.length>o){const n=[];for(let e=0;e<r.length;e+=o)n.push(r.slice(e,e+o));for(let o=0;o<n.length;o++){t(`유저 입력 보내는 중 (${o+1}/${n.length})`,!0);const r=await c.send(e.userMessage,!1);t(`응답 수정 시작 (${o+1}/${n.length})`,!0);const a=await r.set(n[o]);if("SUCCESS"!==a?.result)return t(`응답 수정 실패 (${o+1}/${n.length})`),void alert("메시지 전송에 실패했습니다.")}t("응답 수정 완료")}else{t("유저 입력 보내는 중",!0);const n=await c.send(e.userMessage,!1);t("응답 수정 시작",!0);const o=await n.set(r);if("SUCCESS"!==o?.result)return t("응답 수정 실패"),void alert("메시지 전송에 실패했습니다.");t("응답 수정 완료")}confirm("전송이 완료되었습니다! 페이지를 새로고침하시겠습니까?")?location.reload():(t(""),n.style.display="none")})),setTimeout((()=>{z(d,p)}),0)}H.style.display="custom"===v.value?"block":"none",v.addEventListener("change",(()=>{H.style.display="custom"===v.value?"block":"none"})),w.value="gemini-2.5-pro-exp-03-25"===e.model||"gemini-2.5-flash-preview-04-17"===e.model||"gemini-2.0-flash"===e.model?e.model:"custom",S.style.display="custom"===w.value?"block":"none","custom"===w.value&&(S.value=e.model),w.addEventListener("change",(()=>{S.style.display="custom"===w.value?"block":"none","custom"!==w.value&&(S.value=w.value)})),T.addEventListener("click",(()=>R(!1))),L.addEventListener("click",(()=>R(!0))),T.addEventListener("click",(async()=>{if(!e.key)return alert("Gemini API 키를 설정 탭에서 입력해주세요."),void z(y,$);const n=parseInt(f.value);if(n<0||n>50)return void alert("제한은 0에서 50 사이여야 합니다.");const t=new u(e.useGm),o=a();if(!o)return void alert("잘못된 URL 구조입니다.");k.value=`[${r()}] 채팅방 가져오기 시작\n${k.value}`;if(!await t.getChatroom(o.chatroomId))return k.value=`[${r()}] 채팅방 가져오기 실패\n${k.value}`,void alert("채팅방을 불러오지 못했습니다.");k.value=`[${r()}] 채팅방 가져오기 완료\n${k.value}`,k.value=`[${r()}] 총 ${2*n}턴 메시지 가져오기 시작\n${k.value}`;const i=await t.getMessages(o.chatroomId,"",2*n);if(!i?.data?.list)return k.value=`[${r()}] 메시지 가져오기 실패\n${k.value}`,void alert("메시지를 불러오지 못했습니다.");k.value=`[${r()}] 총 ${2*n}턴 메시지 ${i.data.list.length}개 가져옴\n${k.value}`;const s=await t.getRepresentativePersona();if(!s)return void alert("대표 페르소나를 설정해주세요.");const p=i.data.list.map((n=>({message:n.content,role:n.role,username:"user"===n.role?s.name:void 0})));let m;if("custom"===v.value)m=C.value;else{const n=parseInt(v.value);if(isNaN(n)||n<0||n>=l.length)return void alert("잘못된 프롬프트 선택입니다.");m=l[n].prompt}const b="custom"!==v.value?JSON.stringify({prompt:m,chat_log:p}):`${m}\n[Chat Log]\n${JSON.stringify({content:p})}`,g=Date.now();k.value=`[${r()}] 제미니 요청 시작 (총 ${b.length}자 요청)\n${k.value}`;let h=setInterval((()=>{const n=Math.floor((Date.now()-g)/1e3),e=String(Math.floor(n/60)).padStart(2,"0"),t=String(n%60).padStart(2,"0");q.textContent=`${e}:${t}`}),1e3);try{const n="custom"===w.value?S.value:w.value,t=await(e.useGm?d:c)(n,e.key,b);clearInterval(h);const o=Date.now();k.value=`[${r()}] 제미니 요청 완료 (소요 시간: ${Math.floor((o-g)/1e3)}초)\n${k.value}`,t?N(t):alert("Gemini API 처리에 실패했습니다.")}catch(n){clearInterval(h),k.value=`[${r()}] 오류 발생: ${n.message}\n${k.value}`,alert("Gemini API 처리 중 오류가 발생했습니다.")}})),j.addEventListener("click",(()=>m.remove()))}function x(){if(!/\/u\/[a-f0-9]+\/c\/[a-f0-9]+/.test(location.pathname))return;const n=document.querySelector(".css-uxwch2.edj5hvk0");if(n){if(!document.getElementById("chasmBurner")){const e=n.children[0]?.cloneNode(!0);if(!e)return;const t=e.cloneNode(!0),o=t.querySelector("svg");o&&o.remove(),t.id="chasmBurner";const r=t.querySelector("p")||t.childNodes[1];r&&(r.textContent="✦ 캐즘 버너"),t.style.cursor="pointer",t.addEventListener("click",y),n.appendChild(t)}!async function(){const n=new u,e=await n.getPersona();if(!e.length)return void alert("페르소나를 불러오지 못했습니다.");const t=document.querySelector(".css-uxwch2.edj5hvk0");if(!t)return;if(document.getElementById("personaSwitcherSelect"))return;const o=h("dark"===document.body.dataset.theme),r=t.children[0]?.cloneNode(!0);if(!r)return;const a=r.cloneNode(!0),l=a.querySelector("svg");l&&l.remove(),a.id="personaSwitcherSelect";const i=document.createElement("select");i.style.cssText=`width: 100%; padding: 5px; border-radius: 4px; background: ${o.selectBg}; color: ${o.selectText}; border: 1px solid ${o.borderColor};`,e.forEach((n=>{const e=document.createElement("option");e.value=n._id,e.textContent=n.name,n.isRepresentative&&(e.selected=!0),i.appendChild(e)})),i.addEventListener("change",(async()=>{const e=i.value;await n.setRepresentativePersona(e)?alert("페르소나가 성공적으로 변경되었습니다."):alert("페르소나 변경에 실패했습니다.")}));const s=a.querySelector("p")||a.childNodes[1];if(s){s.innerHTML="✦ 프로필: ",s.style.display="block";const n=document.createElement("div");n.appendChild(i),a.appendChild(n)}a.style.cursor="default",t.appendChild(a)}()}}async function $(){b.init(),x();let n=location.href;g(document,(()=>{location.href!==n&&(n=location.href,x())}))}"loading"===document.readyState?document.addEventListener("DOMContentLoaded",$):await $(),window.addEventListener("load",$)}();
